from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


from keyboards.test_keyboards import *
from handlers.test_processing import user_answer_processing
from database.data import questions


from dotenv import load_dotenv
import os
import asyncio

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

router = Router()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

#  –ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ª–∏ —Ç–µ—Å—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –Ω–∞—á–∞—Ç,
#  –≥–æ–≤–æ—Ä–∏–º –∑–∞–∫–æ–Ω—á–∏—Ç—å
@router.message(Command("test"))
async def if_start_test(message: types.Message):
    if message.from_user.id not in user_answers:
        await message.answer(
            '–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ —Å–∞–º–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é?',
            reply_markup=get_if_start_test_keyboard()
        )
    else:
        await message.answer(
            '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞'
        )


#  –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏,
#  –¥–∞ - —É–¥–∞–ª—è–µ–º –∏ —Å—Ç–∞—Ä—Ç—É–µ–º –∑–∞–Ω–æ–≤–æ
@router.callback_query(F.data == 'yes')
async def process_callback_button(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in user_answers:
        del user_answers[callback_query.from_user.id]

    # await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=questions[0],
        reply_markup=get_answers_for_question(0),
    )


@router.callback_query(F.data == 'no')
async def idk(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        '–ù–µ –∑–Ω–∞—é, —á—Ç–æ —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å'
    )

class TestStates(StatesGroup):
    question = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
#  –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}

#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback'–æ–≤
@router.callback_query(F.data.in_({'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}))
async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    #  –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if user_id not in user_answers:
        user_answers[user_id] = ''

    #  –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answer = callback_query.data
    user_answers[user_id] += user_answer
    print(user_answers)
    
    #  –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data = await state.get_data()
    current_question = data.get("current_question", 0)
    next_question = current_question + 1

    if next_question >= len(questions):
        #  –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
        await delete_buttons(callback_query.message.chat.id, callback_query.message.message_id)

        #  –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        most_popular, least_popular = await user_answer_processing(user_answers[user_id])

        #  –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        result_text = ""
        if most_popular:
            result_text += f"üöÄ –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(most_popular)}\n"
        if least_popular:
            result_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º —Å—Ç–æ–∏—Ç –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è: {', '.join(least_popular)}"

        #  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if result_text:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=result_text
            )

        #  –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        del user_answers[user_id]
    else:

        #  –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
        await delete_buttons(callback_query.message.chat.id, callback_query.message.message_id)

        await asyncio.sleep(0.3)
        
        #  –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(current_question=next_question)

        #  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await send_question(callback_query.message.chat.id, next_question)



#  –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(chat_id, question_index):
    await bot.send_message(
        chat_id=chat_id,
        text=questions[question_index],
        reply_markup=get_answers_for_question(question_index)   
    )


async def delete_buttons(chat_id, message_id):
    await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=None
        )